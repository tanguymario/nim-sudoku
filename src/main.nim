import sudoku

proc main() =
   # var grid = createSudokuGrid([
   #    [0, 0, 0, 0, 0, 0, 0, 0, 0],
   #    [0, 0, 0, 0, 0, 0, 0, 0, 0],
   #    [0, 0, 0, 0, 0, 0, 0, 0, 0],
   #    [0, 0, 0, 0, 0, 0, 0, 0, 0],
   #    [0, 0, 0, 0, 0, 0, 0, 0, 0],
   #    [0, 0, 0, 0, 0, 0, 0, 0, 0],
   #    [0, 0, 0, 0, 0, 0, 0, 0, 0],
   #    [0, 0, 0, 0, 0, 0, 0, 0, 0],
   #    [0, 0, 0, 0, 0, 0, 0, 0, 0],
   # ])

   # Easy - Arizona Daily Wildcat: Tuesday, Jan 17th 2006
   # var fullGrid = createSudokuGrid([
   #    [4, 3, 5, 2, 6, 9, 7, 8, 1],
   #    [6, 8, 2, 5, 7, 1, 4, 9, 3],
   #    [1, 9, 7, 8, 3, 4, 5, 6, 2],
   #    [8, 2, 6, 1, 9, 5, 3, 4, 7],
   #    [3, 7, 4, 6, 8, 2, 9, 1, 5],
   #    [9, 5, 1, 7, 4, 3, 6, 2, 8],
   #    [5, 1, 9, 3, 2, 6, 8, 7, 4],
   #    [2, 4, 8, 9, 5, 7, 1, 3, 6],
   #    [7, 6, 3, 4, 1, 8, 2, 5, 9],
   # ])

   # var grid = createSudokuGrid([
   #    [0, 0, 0, 2, 6, 0, 7, 0, 1],
   #    [6, 8, 0, 0, 7, 0, 0, 9, 0],
   #    [1, 9, 0, 0, 0, 4, 5, 0, 0],
   #    [8, 2, 0, 1, 0, 0, 0, 4, 0],
   #    [0, 0, 4, 6, 0, 2, 9, 0, 0],
   #    [0, 5, 0, 0, 0, 3, 0, 2, 8],
   #    [0, 0, 9, 3, 0, 0, 0, 7, 4],
   #    [0, 4, 0, 0, 5, 0, 0, 3, 6],
   #    [7, 0, 3, 0, 1, 8, 0, 0, 0],
   # ])

   # Easy - Arizona Daily Wildcat: Wednesday, Jan 18th 2006
   # var fullGrid = createSudokuGrid([
   #    [1, 5, 2, 4, 8, 9, 3, 7, 6],
   #    [7, 3, 9, 2, 5, 6, 8, 4, 1],
   #    [4, 6, 8, 3, 7, 1, 2, 9, 5],
   #    [3, 8, 7, 1, 2, 4, 6, 5, 9],
   #    [5, 9, 1, 7, 6, 3, 4, 2, 8],
   #    [2, 4, 6, 8, 9, 5, 7, 1, 3],
   #    [9, 1, 4, 6, 3, 7, 5, 8, 2],
   #    [6, 2, 5, 9, 4, 8, 1, 3, 7],
   #    [8, 7, 3, 5, 1, 2, 9, 6, 4],
   # ])

   # var grid = createSudokuGrid([
   #    [1, 0, 0, 4, 8, 9, 0, 0, 6],
   #    [7, 3, 0, 0, 0, 0, 0, 4, 0],
   #    [0, 0, 0, 0, 0, 1, 2, 9, 5],
   #    [0, 0, 7, 1, 2, 0, 6, 0, 0],
   #    [5, 0, 0, 7, 0, 3, 0, 0, 8],
   #    [0, 0, 6, 0, 9, 5, 7, 0, 0],
   #    [9, 1, 4, 6, 0, 0, 0, 0, 0],
   #    [0, 2, 0, 0, 0, 0, 0, 3, 7],
   #    [8, 0, 0, 5, 1, 2, 0, 0, 4],
   # ])

   # # Intermediate - Daily Telegraph January 19th "Diabolical"
   # var fullGrid = createSudokuGrid([
   #    [1, 2, 3, 6, 7, 8, 9, 4, 5],
   #    [5, 8, 4, 2, 3, 9, 7, 6, 1],
   #    [9, 6, 7, 1, 4, 5, 3, 2, 8],
   #    [3, 7, 2, 4, 6, 1, 5, 8, 9],
   #    [6, 9, 1, 5, 8, 3, 2, 7, 4],
   #    [4, 5, 8, 7, 9, 2, 6, 1, 3],
   #    [8, 3, 6, 9, 2, 4, 1, 5, 7],
   #    [2, 1, 9, 8, 5, 7, 4, 3, 6],
   #    [7, 4, 5, 3, 1, 6, 8, 9, 2],
   # ])

   # var grid = createSudokuGrid([
   #    [0, 2, 0, 6, 0, 8, 0, 0, 0],
   #    [5, 8, 0, 0, 0, 9, 7, 0, 0],
   #    [0, 0, 0, 0, 4, 0, 0, 0, 0],
   #    [3, 7, 0, 0, 0, 0, 5, 0, 0],
   #    [6, 0, 0, 0, 0, 0, 0, 0, 4],
   #    [0, 0, 8, 0, 0, 0, 0, 1, 3],
   #    [0, 0, 0, 0, 2, 0, 0, 0, 0],
   #    [0, 0, 9, 8, 0, 0, 0, 3, 6],
   #    [0, 0, 0, 3, 0, 6, 0, 9, 0],
   # ])

   # Difficult - Vegard Hanssen puzzle 2155141
   # var fullGrid = createSudokuGrid([
   #    [5, 8, 1, 6, 7, 2, 4, 3, 9],
   #    [7, 9, 2, 8, 4, 3, 6, 5, 1],
   #    [3, 6, 4, 5, 9, 1, 7, 8, 2],
   #    [4, 3, 8, 9, 5, 7, 2, 1, 6],
   #    [2, 5, 6, 1, 8, 4, 9, 7, 3],
   #    [1, 7, 9, 3, 2, 6, 8, 4, 5],
   #    [8, 4, 5, 2, 1, 9, 3, 6, 7],
   #    [9, 1, 3, 7, 6, 8, 5, 2, 4],
   #    [6, 2, 7, 4, 3, 5, 1, 9, 8],
   # ])

   # var grid = createSudokuGrid([
   #    [0, 0, 0, 6, 0, 0, 4, 0, 0],
   #    [7, 0, 0, 0, 0, 3, 6, 0, 0],
   #    [0, 0, 0, 0, 9, 1, 0, 8, 0],
   #    [0, 0, 0, 0, 0, 0, 0, 0, 0],
   #    [0, 5, 0, 1, 8, 0, 0, 0, 3],
   #    [0, 0, 0, 3, 0, 6, 0, 4, 5],
   #    [0, 4, 0, 2, 0, 0, 0, 6, 0],
   #    [9, 0, 3, 0, 0, 0, 0, 0, 0],
   #    [0, 2, 0, 0, 0, 0, 1, 0, 0],
   # ])

   # Not fun - Challenge 1 from Sudoku Solver by Logic
   var fullGrid = createSudokuGrid([
      [1, 2, 6, 4, 3, 7, 9, 5, 8],
      [8, 9, 5, 6, 2, 1, 4, 7, 3],
      [3, 7, 4, 9, 8, 5, 1, 2, 6],
      [4, 5, 7, 1, 9, 3, 8, 6, 2],
      [9, 8, 3, 2, 4, 6, 5, 1, 7],
      [6, 1, 2, 5, 7, 8, 3, 9, 4],
      [2, 6, 9, 3, 1, 4, 7, 8, 5],
      [5, 4, 8, 7, 6, 9, 2, 3, 1],
      [7, 3, 1, 8, 5, 2, 6, 4, 9],
   ])

   var grid = createSudokuGrid([
      [0, 2, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 6, 0, 0, 0, 0, 3],
      [0, 7, 4, 0, 8, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 3, 0, 0, 2],
      [0, 8, 0, 0, 4, 0, 0, 1, 0],
      [6, 0, 0, 5, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 1, 0, 7, 8, 0],
      [5, 0, 0, 0, 0, 9, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 4, 0],
   ])

   # Test
   # var grid = createSudokuGrid([
   #    [0, 0, 0, 7, 2, 1, 5, 8, 6],
   #    [0, 0, 0, 0, 8, 0, 7, 0, 0],
   #    [0, 0, 0, 0, 0, 0, 0, 0, 0],
   #    [0, 0, 0, 0, 0, 0, 0, 0, 0],
   #    [0, 0, 0, 0, 0, 0, 2, 0, 1],
   #    [0, 0, 0, 5, 0, 0, 0, 0, 0],
   #    [0, 0, 0, 0, 5, 0, 0, 0, 0],
   #    [0, 0, 0, 0, 0, 0, 1, 0, 0],
   #    [0, 0, 0, 0, 0, 0, 0, 0, 2],
   # ])

   # Test 2
   # var grid = createSudokuGrid([
   #    [0, 0, 0, 0, 0, 0, 0, 0, 0],
   #    [0, 0, 0, 0, 0, 0, 0, 0, 0],
   #    [0, 5, 0, 0, 0, 0, 0, 0, 0],
   #    [0, 0, 1, 0, 0, 0, 0, 0, 0],
   #    [0, 0, 0, 0, 0, 0, 0, 0, 0],
   #    [0, 0, 0, 0, 0, 0, 5, 0, 0],
   #    [0, 0, 0, 0, 0, 5, 0, 0, 0],
   #    [0, 0, 7, 0, 0, 0, 0, 0, 0],
   #    [0, 0, 3, 0, 0, 0, 0, 0, 0],
   # ])

   # Forced pairs example
   # grid = createSudokuGrid([
   #    [1, 2, 0, 0, 0, 0, 0, 0, 0],
   #    [0, 0, 0, 0, 0, 0, 0, 0, 7],
   #    [3, 4, 0, 0, 0, 0, 0, 0, 0],
   #    [0, 0, 0, 0, 0, 0, 0, 0, 0],
   #    [0, 0, 0, 0, 0, 0, 0, 0, 0],
   #    [0, 0, 0, 0, 0, 0, 0, 0, 0],
   #    [0, 0, 0, 0, 0, 0, 0, 0, 0],
   #    [5, 6, 0, 0, 0, 0, 3, 0, 0],
   #    [8, 9, 0, 0, 0, 0, 4, 5, 0],
   # ])

   # # Double pairs example
   # grid = createSudokuGrid([
   #    [0, 0, 0, 0, 0, 0, 0, 0, 0],
   #    [0, 0, 0, 0, 0, 0, 0, 0, 0],
   #    [0, 0, 0, 0, 0, 0, 0, 0, 0],
   #    [0, 0, 0, 0, 0, 0, 0, 0, 0],
   #    [0, 0, 0, 0, 0, 0, 2, 7, 1],
   #    [0, 0, 0, 1, 2, 7, 0, 0, 0],
   #    [2, 0, 0, 0, 0, 0, 0, 0, 0],
   #    [7, 0, 0, 0, 0, 0, 0, 0, 0],
   #    [0, 0, 0, 0, 0, 0, 0, 0, 0],
   # ])

   echo(grid)

   # grid.solveWithConstraint()

   grid.solveWithBacktracing()

   echo(grid)

   echo (if grid == fullGrid: "Correct!" else: "Incorrect")
   if grid.broken:
      echo "Broken!"

main()
